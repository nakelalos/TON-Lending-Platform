<!-- views/dashboard.ejs -->

<!DOCTYPE html>
<html>
<head>
  <title>User Dashboard</title>
</head>
<body>
  <h1>Welcome, <%= user.name %>!</h1>
  <div>
    <a href="/loanApproval/<%= application.id %>">Approve Loan</a>
    <a href="/loanRejection/<%= application.id %>">Reject Loan</a>
  </div>
  <!-- Display loan status -->
<div>
    <% if (application.status === 'approved') { %>
      <p>Loan Status: Approved</p>
    <% } else if (application.status === 'rejected') { %>
      <p>Loan Status: Rejected</p>
    <% } else { %>
      <p>Loan Status: Pending</p>
    <% } %>
  </div>
  <div>
    <h2>Loan Applications List</h2>
    <ul id="loanApplicationsList">

    </ul>
  </div>
 
  <script>
    // Function to fetch loan applications data from the server
    async function fetchLoanApplications() {
      try {
        const response = await fetch('/loanApplications');
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error fetching loan applications:', error);
        return [];
      }
    }
  
    // Function to display loan applications list
    async function displayLoanApplications() {
      const loanApplicationsList = document.getElementById('loanApplicationsList');
      const loanApplications = await fetchLoanApplications();
  
      // Clear existing list items
      loanApplicationsList.innerHTML = '';
  
      // Add loan applications to the list
      loanApplications.forEach(application => {
        const listItem = document.createElement('li');
        listItem.textContent = `Application ID: ${application.id}, Status: ${application.status}, Amount: ${application.amount}`;
        loanApplicationsList.appendChild(listItem);
      });
    }
  

    document.addEventListener('DOMContentLoaded', displayLoanApplications);
  </script>
  <!-- Form to submit a new loan application -->
<div>
    <h2>Submit New Loan Application</h2>
    <form id="loanApplicationForm">
      <label for="amount">Loan Amount:</label>
      <input type="number" id="amount" required /><br />
  
      <button type="submit">Submit Application</button>
    </form>
  </div>
<!-- Form to submit a new loan application -->
<div>
    <h2>Submit New Loan Application</h2>
    <form id="loanApplicationForm">
      <label for="amount">Loan Amount:</label>
      <input type="number" id="amount" required /><br />
  
      <button type="submit">Submit Application</button>
    </form>
  </div>
  
  <script>
    // Function to handle form submission
    async function submitLoanApplication(event) {
      event.preventDefault();
      const form = event.target;
      const formData = new FormData(form);
  
      try {
        const response = await fetch('/submitLoanApplication', {
          method: 'POST',
          body: formData,
        });
        const data = await response.json();
        alert(data.message);
        form.reset(); // Clears the form fields after successful submission
      } catch (error) {
        console.error('Error submitting loan application:', error);
        alert('An error occurred while submitting the loan application.');
      }
    }
  
    const loanApplicationForm = document.getElementById('loanApplicationForm');
    loanApplicationForm.addEventListener('submit', submitLoanApplication);
  </script>
  <div>
    <h2>Loan Applications</h2>
    <ul id="loanApplicationsList"></ul>
  </div>
  

  <script>
    // Function to display loan applications on the dashboard
    async function displayLoanApplications() {
      try {
        const response = await fetch('/loanApplications');
        const data = await response.json();
        const loanApplicationsList = document.getElementById('loanApplicationsList');
  
        // Clear existing list items
        loanApplicationsList.innerHTML = '';
  
        data.forEach((loanApplication) => {
          const listItem = document.createElement('li');
          listItem.textContent = `ID: ${loanApplication.id}, Amount: ${loanApplication.amount}, Status: ${loanApplication.status}`;
          loanApplicationsList.appendChild(listItem);
        });
      } catch (error) {
        console.error('Error fetching loan applications:', error);
        alert('An error occurred while fetching loan applications.');
      }
    }
  
    // Call the function to display loan applications when the dashboard loads
    displayLoanApplications();
  </script>

<h1>Welcome to the Dashboard</h1>

<h2>Pending Loan Applications</h2>
<div id="pendingLoans">

</div>

<script>
  // Function to fetch and display the list of pending loan applications
  async function fetchPendingLoanApplications() {
    try {
      const response = await fetch('/api/pending-loans');
      const data = await response.json();
      const pendingLoansContainer = document.getElementById('pendingLoans');

      // Clear existing content
      pendingLoansContainer.innerHTML = '';

      // Render each pending loan application
      data.forEach(loan => {
        const loanElement = document.createElement('div');
        loanElement.innerHTML = `
          <p><strong>Applicant Name:</strong> ${loan.applicantName}</p>
          <p><strong>Loan Amount:</strong> $${loan.amount}</p>
          <button onclick="approveLoan('${loan.id}')">Approve</button>
          <button onclick="rejectLoan('${loan.id}')">Reject</button>
          <hr>
        `;
        pendingLoansContainer.appendChild(loanElement);
      });
    } catch (error) {
      console.error('Error fetching pending loan applications:', error);
    }
  }

  // Function to handle loan application approval
  async function approveLoan(id) {
    try {
      const response = await fetch(`/api/approve/${id}`, { method: 'POST' });
      const data = await response.json();
      console.log(data); // Display the response from the server

      // Once the loan is approved, fetch and display the updated list of pending loan applications
      fetchPendingLoanApplications();
    } catch (error) {
      console.error('Error approving loan application:', error);
    }
  }

  // Function to handle loan application rejection
  async function rejectLoan(id) {
    try {
      const response = await fetch(`/api/reject/${id}`, { method: 'POST' });
      const data = await response.json();
      console.log(data); // Display the response from the server

      // Once the loan is rejected, fetch and display the updated list of pending loan applications
      fetchPendingLoanApplications();
    } catch (error) {
      console.error('Error rejecting loan application:', error);
    }
  }

  // Fetch and display the initial list of pending loan applications
  fetchPendingLoanApplications();
</script>

  
</body>
</html>
